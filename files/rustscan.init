#!/bin/sh /etc/rc.common

START=99
STOP=10

USE_PROCD=1
PROG=/usr/bin/rustscan
CONF_FILE=/etc/rustscan/rustscan.toml

validate_rustscan_section() {
	uci_load_validate rustscan rustscan "$1" "$2" \
		'enabled:bool:0' \
		'batch_size:uinteger:4500' \
		'timeout:uinteger:1500' \
		'tries:uinteger:1' \
		'greppable:bool:0' \
		'accessible:bool:0' \
		'ulimit:uinteger:5000' \
		'top_ports:uinteger:1000' \
		'scripts_timeout:uinteger:10000' \
		'range:string' \
		'ports:string' \
		'exclude_ports:string' \
		'config_file:string:/etc/rustscan/rustscan.toml'
}

generate_config() {
	local enabled batch_size timeout tries greppable accessible ulimit top_ports scripts_timeout range ports exclude_ports config_file
	
	validate_rustscan_section config "$1" || {
		echo "validation failed"
		return 1
	}
	
	[ "$enabled" = "1" ] || return 1
	
	# Generate TOML configuration file
	mkdir -p "$(dirname "$config_file")"
	
	cat > "$config_file" << EOF
# RustScan Configuration File
# Generated by OpenWrt init script

[rustscan]
batch_size = $batch_size
timeout = $timeout
tries = $tries
greppable = $greppable
accessible = $accessible
ulimit = $ulimit
top_ports = $top_ports
scripts_timeout = $scripts_timeout
EOF

	if [ -n "$range" ]; then
		echo "range = \"$range\"" >> "$config_file"
	fi
	
	if [ -n "$ports" ]; then
		echo "ports = \"$ports\"" >> "$config_file"
	fi
	
	if [ -n "$exclude_ports" ]; then
		echo "exclude_ports = \"$exclude_ports\"" >> "$config_file"
	fi
	
	return 0
}

start_service() {
	generate_config || return 1
	
	# RustScan is typically used as a command-line tool, not a daemon
	# This service just ensures configuration is ready
	echo "RustScan configuration generated at $CONF_FILE"
	echo "Use 'rustscan --help' for usage information"
}

service_triggers() {
	procd_add_reload_trigger "rustscan"
}

reload_service() {
	stop
	start
}
